    Final Project
Preemptive OS â€” 70 pts
======================
Shane Harvey 108272239
Scott Harvey 108272691
======================

/bin/mallochuge and /bin/mmaphuge both allocate 1TB of memory and then
proceed to write to every page.



      sbush shell
======================
* A '|' must be preceded and followed by at least one ' ', for example:
    $ ls | cat

* There is no hardcoded limit on the length of a single line, nor on the number
  of pipes a line can contain.

* To create or redefine an exisiting environmental variable the syntax is:
    $ # This creates a new variable
    $ MYVAR=ThisIsAValue
    $ # This modifies PATH by prepending the value of $HOME
    $ PATH=$HOME:$PATH

** To export an existing shell variable to its environment (so that child
   processes receive them) the syntax is:
    $ export varname



        sblibc
=====================
* malloc/realloc/calloc are implemented with sbrk.
    NOTE: Currently uses a global state variable defined in libc/malloc.c and
    therefore the library is only functional as a static library.

* printf
    supports the formats: %c, %d, %ld, %lo, %lu, %lx, %p, %o, %u, %x, and %%

* scanf
    supports the formats: %c, %d, %s, and %x
    supports having multiple in format, for example:
        scanf("%s %d", string, &integer);
    NOTE: %x does not support having a leading "0x" in front of the hex value.



======================
The provided Makefile:
  1) builds a kernel
  2) copies it into rootfs/boot/kernel/kernel
  3) creates an ISO CD image with the rootfs/ contents

To boot the system in QEMU, run:
  qemu-system-x86_64 -curses -cdrom $USER.iso -drive id=disk,file=$USER.img,if=none -device ahci,id=ahci -device ide-drive,drive=disk,bus=ahci.0 -net nic -net user,hostfwd=tcp::10080-:80 -net user,hostfwd=tcp::10023-:23 --no-reboot -gdb tcp::9998

  Explanation of parameters:
  -curses         use a text console (omit this to use default SDL/VNC console)
  -cdrom x.iso    connect a CD-ROM and insert CD with x.iso disk
  --no-reboot     exit when guest reboots
  -gdb tcp::9998  listen for "remote" debugging connections on port 9998

  connect a hard drive with x.img disk:
  -drive id=disk,file=$USER.img,if=none -device ahci,id=ahci -device ide-drive,drive=disk,bus=ahci.0
  connect a NIC and forward local port 10080 into port 80 and local port 10023 to port 23
  -net nic -net user,hostfwd=tcp::10080-:80 -net user,hostfwd=tcp::10023-:23

When using the -curses mode, switch to the qemu> console with ESC-2.

To connect a remote debugger to the running qemu VM:
  gdb ./kernel
  target remote localhost:9998
